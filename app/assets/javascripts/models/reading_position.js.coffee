# Copyright (C) 2012  TEA, the ebook alternative <http://www.tea-ebook.com/>
# 
# This file is part of TeaBook Open Reader
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.0 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# An additional permission has been granted as a special exception 
# to the GNU General Public Licence. 
# You should have received a copy of this exception. If not, see 
# <https://github.com/TEA-ebook/teabook-open-reader/blob/master/GPL-3-EXCEPTION>.



class App.Models.ReadingPosition extends Backbone.RelationalModel
  initialize: ->
    @textLocator = new App.Misc.TextLocator

  offlineKey: ->
    "bookmark:#{@get 'user_id'}:#{@get 'book_id'}:reading_position"

  url: ->
    "/books/#{@get 'book_id'}/reading_position.json"

  sync: (method, model, options = {})->
    switch method
      when 'create', 'update'
        if App.Store
          App.Store.set @offlineKey(), @toJSON()
        Backbone.sync(method, model, options)
      when 'read'
        if App.Store
          onError = =>
            App.Store.get @offlineKey(), (result)=>
              @set result if result
              @trigger 'fetched'
              options.error() if options.error
          onSuccess = (data)=>
            @set @bestPositionForDevice(data)
            @trigger 'fetched'
            options.success() if options.success

          Backbone.sync(method, model, {error: onError, success: onSuccess})
        else
          Backbone.sync(method, model, options)
    @

  updatePosition: (data)->
    paths = @textLocator.readingPositionPaths(data.pages)
    if paths
      # @refreshVisualMark(monelem_pages, paths.selector)
      attributes =
        start_xpath:     paths.xpath
        component_name:  data.locus.componentId
        device:          @deviceId()
        locus:           data.locus
        percentage:      data.percentage
      @set attributes

    # console.log('reading position is', @toJSON())
    @

  position: ->
    if @get('locus')
      @get('locus')
    else if @get('component_name') && @get('start_xpath')
      {componentId: @get('component_name'), xpath: @get('start_xpath')}

  refreshVisualMark: (monelem_pages, selector)->
    frameContent = $($(monelem_pages[0]).find('iframe')[0].contentDocument)
    @removeOldMarks(frameContent)
    @addNewMark(frameContent, selector)

  addNewMark: (frameContent, selector)->
    frameContent.find(selector).
      css('background-color', '#ffe')

  removeOldMarks: (frameContent)->
    frameContent.find('.tea-rp-marker').remove()

  deviceId: ->
    window.navigator.userAgent

  # Choose be smartest possible position according to what we know about the
  # last device that generated it
  bestPositionForDevice: (data)->
    if data.device && data.device == @deviceId()
      # We can use the locus, so let's get rid of possibly contradicting
      # information
      data.component_name = null
    else
      # The locus was generated by another device, let's forget about it
      # altogether
      data.locus = null

    data
